server:
  port: 8083
  servlet:
    context-path: /tenant-management
  shutdown: graceful
  error:
    include-message: always
    include-binding-errors: always

spring:
  application:
    name: tenant-management-service


  # Database Configuration
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5000/tenant_db}
    username: ${DB_USERNAME:tenant_user}
    password: ${DB_PASSWORD:tenant_pass}
    driver-class-name: org.postgresql.Driver
    hikari:
      pool-name: TenantMgmtPool
      maximum-pool-size: ${DATABASE_POOL_SIZE:20}
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 30000
      max-lifetime: 1800000
      leak-detection-threshold: 60000

  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        format_sql: true
        jdbc:
          batch_size: 25
          batch_versioned_data: true
        order_inserts: true
        order_updates: true
        generate_statistics: false
    show-sql: false
    open-in-view: false

  # Flyway Configuration
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
    schemas: public
    validate-on-migrate: true

  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BROKERS:localhost:9092}

    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.ByteArraySerializer
      acks: all
      retries: 3
      properties:
        enable.idempotence: true
        max.in.flight.requests.per.connection: 5
        compression.type: snappy
        linger.ms: 10
        batch.size: 16384

    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
      group-id: tenant-management-service
      auto-offset-reset: earliest
      enable-auto-commit: false
      properties:
        session.timeout.ms: 30000
        heartbeat.interval.ms: 10000
        isolation.level: read_committed

    listener:
      ack-mode: manual
      concurrency: 3

  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      database: 3
      timeout: 5000
      lettuce:
        pool:
          max-active: 10
          max-idle: 8
          min-idle: 2
          max-wait: -1ms

  # Cache Configuration
  cache:
    type: caffeine
    caffeine:
      spec: maximumSize=1000,expireAfterWrite=5m,recordStats
    cache-names:
      - tenants
      - subscriptions
      - feature-flags
      - tenant-settings
      - billing-details

# Schema Registry Configuration
schema:
  registry:
    url: ${SCHEMA_REGISTRY_URL:http://localhost:8081}

# Kafka Topics Configuration
kafka:
  topics:
    # Tenant Events
    tenant-created: nnipa.events.tenant.created
    tenant-updated: nnipa.events.tenant.updated
    tenant-activated: nnipa.events.tenant.activated
    tenant-deactivated: nnipa.events.tenant.deactivated
    tenant-suspended: nnipa.events.tenant.suspended
    tenant-reactivated: nnipa.events.tenant.reactivated
    tenant-deleted: nnipa.events.tenant.deleted

    # Subscription Events
    subscription-created: nnipa.events.subscription.created
    subscription-changed: nnipa.events.subscription.changed
    subscription-cancelled: nnipa.events.subscription.cancelled
    subscription-renewed: nnipa.events.subscription.renewed
    billing-failed: nnipa.events.billing.failed

    # Feature Flag Events
    feature-enabled: nnipa.events.feature.enabled
    feature-disabled: nnipa.events.feature.disabled
    feature-updated: nnipa.events.feature.updated

    # Commands from other services
    create-tenant-command: nnipa.commands.tenant.create
    provision-tenant-command: nnipa.commands.tenant.provision

# Tenant Management Configuration
tenant:
  defaults:
    trial-days: 30
    max-users: 10
    max-projects: 5
    storage-quota-gb: 10
    api-rate-limit: 1000

  subscription:
    grace-period-days: 7
    auto-renew-enabled: true
    payment-retry-attempts: 3

  billing:
    stripe:
      enabled: ${STRIPE_ENABLED:false}
      api-key: ${STRIPE_API_KEY:}
      webhook-secret: ${STRIPE_WEBHOOK_SECRET:}
    default-currency: USD
    tax-rate: 0.0

  feature-flags:
    default-enabled:
      - BASIC_ANALYTICS
      - STANDARD_REPORTS
      - EMAIL_NOTIFICATIONS
    premium-features:
      - ADVANCED_ANALYTICS
      - ML_MODELS
      - CUSTOM_DASHBOARDS
      - API_ACCESS
      - PRIORITY_SUPPORT

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      kafka-producer:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true

      redis-cache:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 20s

  ratelimiter:
    instances:
      api-limiter:
        limit-for-period: 100
        limit-refresh-period: 1s
        timeout-duration: 5s

# Management & Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,caches,flyway
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
  health:
    db:
      enabled: true
    redis:
      enabled: true
    kafka:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
      environment: ${spring.profiles.active}
  prometheus:
    metrics:
      export:
        enabled: true

# API Documentation
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  packages-to-scan: com.nnipa.tenant.controller
  paths-to-match: /api/**

# Logging Configuration
logging:
  level:
    root: INFO
    com.nnipa.tenant: DEBUG
    org.springframework.kafka: INFO
    org.apache.kafka: WARN
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/tenant-management-service.log
    max-size: 10MB
    max-history: 30