# Application configuration for NNIPA Tenant Management Service
spring:
  application:
    name: tenant-management-service

  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}

  # ============================================================================
  # DATABASE CONNECTION #1: Main Application Database
  # ============================================================================
  # This is where the tenant management system stores its own data:
  # - Tenant metadata (tenant records, settings, subscriptions)
  # - User information
  # - Audit logs for the management system itself
  # - System configuration
  # This database is SHARED across all tenants for management purposes
  # ============================================================================
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/tenant_db_dev}
    username: ${DB_USERNAME:tenant_dev}
    password: ${DB_PASSWORD:dev_password}
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 30000
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 600000
      max-lifetime: 1800000
      pool-name: "MainAppPool"

  # JPA Configuration (uses the main datasource above)
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 25
          batch_versioned_data: true
        order_inserts: true
        order_updates: true

  # Flyway Configuration (uses the main datasource above)
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration

  # Jackson Configuration
  jackson:
    default-property-inclusion: non_null
    serialization:
      write-dates-as-timestamps: false
      indent-output: false
    deserialization:
      fail-on-unknown-properties: false
    time-zone: UTC
    date-format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z'

  # Redis Cache Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 600000
      cache-null-values: false
      use-key-prefix: true
      key-prefix: "nnipa:"

# Server Configuration
server:
  port: 8080
  servlet:
    context-path: /tenant-management

# Application-specific Configuration
app:
  tenant:
    # ============================================================================
    # DATABASE CONNECTION #2: Administrative Database Connection
    # ============================================================================
    # This connection is used ONLY for administrative operations:
    # - Creating new tenant databases (CREATE DATABASE statements)
    # - Dropping tenant databases (DROP DATABASE statements)
    # - Managing database users and permissions
    # - Checking if databases exist
    #
    # This MUST connect to the 'postgres' database (PostgreSQL's system database)
    # with a user that has CREATEDB privileges (usually 'postgres' superuser)
    # ============================================================================
    admin-datasource:
      url: ${ADMIN_DB_URL:jdbc:postgresql://localhost:5001/postgres}
      username: ${ADMIN_DB_USERNAME:postgres}
      password: ${ADMIN_DB_PASSWORD:postgres}
      driver-class-name: org.postgresql.Driver

    # ============================================================================
    # CONFIGURATION PARAMETERS (NOT A DATABASE CONNECTION)
    # ============================================================================
    # These are just configuration values used when building connection strings
    # for newly created tenant databases. They are NOT a separate connection.
    # When a new tenant database is created, these values help construct
    # the JDBC URL for that tenant's database.
    # ============================================================================
    database:
      host: ${TENANT_DB_HOST:localhost}  # Host where tenant databases will be created
      port: ${TENANT_DB_PORT:5001}        # Port for tenant database connections

    # Database naming configuration
    database-prefix: nnipa_    # Prefix for tenant database names (e.g., nnipa_gov_doh_001)
    schema-prefix: tenant_     # Prefix for tenant schemas (for SCHEMA_PER_TENANT strategy)

    # Cache settings
    cache-ttl-minutes: 10

    # Provisioning settings
    trial-period-days: 14
    auto-activation: false
    max-activation-attempts: 3

    # Schema provisioning settings
    schema:
      prefix: tenant_
      template: tenant_template

    # Subscription defaults
    subscription:
      default-trial-days: 14
      auto-renew: true
      grace-period-days: 7

    # Feature flag defaults
    features:
      auto-enable-basic: true
      trial-features:
        - ADVANCED_ANALYTICS
        - DATA_EXPORT
        - CUSTOM_DASHBOARDS

    # Usage tracking
    usage:
      tracking-interval: HOURLY
      aggregation-interval: DAILY
      retention-days: 90

    # Organization defaults by type
    organization-defaults:
      government:
        compliance-frameworks:
          - FISMA
          - FedRAMP
        data-retention-days: 2555  # 7 years
      healthcare:
        compliance-frameworks:
          - HIPAA
        data-retention-days: 2190  # 6 years
      financial:
        compliance-frameworks:
          - SOX
          - PCI_DSS
        data-retention-days: 2555  # 7 years
      academic:
        compliance-frameworks:
          - FERPA
        data-retention-days: 1095  # 3 years
      default:
        compliance-frameworks:
          - GDPR
        data-retention-days: 365   # 1 year

  # Security Configuration
  security:
    jwt-secret: ${JWT_SECRET:your-secret-key}
    jwt-expiration-ms: 3600000

  # Integration URLs
  integration:
    auth-service-url: ${AUTH_SERVICE_URL:http://localhost:8081}
    billing-service-url: ${BILLING_SERVICE_URL:http://localhost:8082}
    notification-service-url: ${NOTIFICATION_SERVICE_URL:http://localhost:8083}

  # Async processing configuration
  async:
    core-pool-size: 4
    max-pool-size: 10
    queue-capacity: 100
    thread-name-prefix: nnipa-async-

  # Encryption for database passwords
  encryption:
    key: ${ENCRYPTION_KEY:DefaultEncryptionKey123}  # Change in production!

# Spring task execution configuration
task:
  execution:
    pool:
      core-size: 4
      max-size: 10
      queue-capacity: 100
  scheduling:
    pool:
      size: 2

# Actuator Configuration
management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
  health:
    redis:
      enabled: true
    db:
      enabled: true

# API Documentation
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    enabled: true

# Logging Configuration
logging:
  level:
    root: INFO
    com.nnipa: DEBUG
    com.nnipa.tenant.service.DatabaseProvisioningService: DEBUG
    com.nnipa.tenant.service.TenantProvisioningService: DEBUG
    org.springframework.security: WARN
    org.hibernate: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/tenant-management.log
    max-size: 10MB
    max-history: 30